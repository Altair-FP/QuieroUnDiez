// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuieroUn10.Data;

namespace QuieroUn10.Migrations
{
    [DbContext(typeof(QuieroUnDiezDBContex))]
    [Migration("20210525184305_ultimaMigracion")]
    partial class ultimaMigracion
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("QuieroUn10.Models.Admin", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(15) CHARACTER SET utf8mb4")
                        .HasMaxLength(15);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasMaxLength(40);

                    b.Property<int>("UserAccountId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserAccountId");

                    b.ToTable("ADMIN");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Name = "Admin1",
                            Phone = "698756483",
                            Surname = "Admin1",
                            UserAccountId = 1
                        },
                        new
                        {
                            ID = 2,
                            Name = "Admin2",
                            Phone = "698756483",
                            Surname = "Admin2",
                            UserAccountId = 2
                        });
                });

            modelBuilder.Entity("QuieroUn10.Models.CalendarTask", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("DayEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DayStart")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StudentId");

                    b.ToTable("CALENDAR_TASK");
                });

            modelBuilder.Entity("QuieroUn10.Models.Doc", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("DocByte")
                        .HasColumnType("longblob");

                    b.Property<string>("DocContentType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DocSourceFileName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("StudentHasSubjectId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StudentHasSubjectId");

                    b.ToTable("DOC");
                });

            modelBuilder.Entity("QuieroUn10.Models.Menu", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30);

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.HasKey("ID");

                    b.ToTable("MENU");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Action = "Index",
                            Controller = "UserAccounts",
                            Label = "User Accounts"
                        },
                        new
                        {
                            ID = 2,
                            Action = "Index",
                            Controller = "Roles",
                            Label = "Roles"
                        },
                        new
                        {
                            ID = 3,
                            Action = "Index",
                            Controller = "Students",
                            Label = "Students"
                        },
                        new
                        {
                            ID = 4,
                            Action = "Index",
                            Controller = "AdminDtoes",
                            Label = "Admins"
                        },
                        new
                        {
                            ID = 5,
                            Action = "Index",
                            Controller = "Menus",
                            Label = "Menus"
                        },
                        new
                        {
                            ID = 6,
                            Action = "Index",
                            Controller = "Studies",
                            Label = "Studies"
                        },
                        new
                        {
                            ID = 7,
                            Action = "Index",
                            Controller = "Subjects",
                            Label = "Subjects"
                        },
                        new
                        {
                            ID = 8,
                            Action = "Index",
                            Controller = "StudyHasSubjects",
                            Label = "Study Has Subjects"
                        },
                        new
                        {
                            ID = 9,
                            Action = "Index",
                            Controller = "CalendarTasks",
                            Label = "Calendario de tareas"
                        },
                        new
                        {
                            ID = 10,
                            Action = "Index",
                            Controller = "Docs",
                            Label = "Documents"
                        },
                        new
                        {
                            ID = 11,
                            Action = "Index",
                            Controller = "StudentHasSubjects",
                            Label = "Asignaturas"
                        },
                        new
                        {
                            ID = 12,
                            Action = "AllIndex",
                            Controller = "Tasks",
                            Label = "Tareas"
                        },
                        new
                        {
                            ID = 13,
                            Action = "Details",
                            Controller = "AdminDtoes",
                            Label = "Profile"
                        },
                        new
                        {
                            ID = 14,
                            Action = "Details",
                            Controller = "StudentDtoes",
                            Label = "Perfil"
                        },
                        new
                        {
                            ID = 15,
                            Action = "Index",
                            Controller = "Methods",
                            Label = "Método Pomodoro"
                        },
                        new
                        {
                            ID = 16,
                            Action = "IndexAdmin",
                            Controller = "StudentHasSubjects",
                            Label = "Student Subject"
                        });
                });

            modelBuilder.Entity("QuieroUn10.Models.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool>("Enabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(30) CHARACTER SET utf8mb4")
                        .HasMaxLength(30);

                    b.HasKey("ID");

                    b.ToTable("ROLE");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Enabled = false,
                            Name = "ADMIN"
                        },
                        new
                        {
                            ID = 2,
                            Enabled = false,
                            Name = "STUDENT"
                        });
                });

            modelBuilder.Entity("QuieroUn10.Models.RoleHasMenu", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MenuId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MenuId");

                    b.HasIndex("RoleId");

                    b.ToTable("ROLE_HAS_MENU");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            MenuId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            ID = 2,
                            MenuId = 2,
                            RoleId = 1
                        },
                        new
                        {
                            ID = 3,
                            MenuId = 3,
                            RoleId = 1
                        },
                        new
                        {
                            ID = 4,
                            MenuId = 4,
                            RoleId = 1
                        },
                        new
                        {
                            ID = 5,
                            MenuId = 5,
                            RoleId = 1
                        },
                        new
                        {
                            ID = 6,
                            MenuId = 6,
                            RoleId = 1
                        },
                        new
                        {
                            ID = 7,
                            MenuId = 7,
                            RoleId = 1
                        },
                        new
                        {
                            ID = 8,
                            MenuId = 8,
                            RoleId = 1
                        },
                        new
                        {
                            ID = 9,
                            MenuId = 16,
                            RoleId = 1
                        },
                        new
                        {
                            ID = 13,
                            MenuId = 11,
                            RoleId = 2
                        },
                        new
                        {
                            ID = 14,
                            MenuId = 12,
                            RoleId = 2
                        },
                        new
                        {
                            ID = 15,
                            MenuId = 9,
                            RoleId = 2
                        },
                        new
                        {
                            ID = 16,
                            MenuId = 14,
                            RoleId = 2
                        },
                        new
                        {
                            ID = 17,
                            MenuId = 15,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("QuieroUn10.Models.Student", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Activate")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(20) CHARACTER SET utf8mb4")
                        .HasMaxLength(20);

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(15) CHARACTER SET utf8mb4")
                        .HasMaxLength(15);

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("varchar(40) CHARACTER SET utf8mb4")
                        .HasMaxLength(40);

                    b.Property<int>("UserAccountId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserAccountId");

                    b.ToTable("STUDENT");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Activate = false,
                            Birthdate = new DateTime(1999, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Alejandro",
                            Phone = "620730065",
                            Surname = "Cruz",
                            UserAccountId = 3
                        },
                        new
                        {
                            ID = 2,
                            Activate = false,
                            Birthdate = new DateTime(1999, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin 2",
                            Phone = "666444555",
                            Surname = "Admin",
                            UserAccountId = 4
                        });
                });

            modelBuilder.Entity("QuieroUn10.Models.StudentHasSubject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("InscriptionDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.ToTable("STUDENT_HAS_SUBJECT");
                });

            modelBuilder.Entity("QuieroUn10.Models.Study", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("STUDY");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Acronym = "DAW",
                            Name = "Desarrollo de Aplicaciones Web"
                        },
                        new
                        {
                            ID = 2,
                            Acronym = "DAM",
                            Name = "Desarrollo de Aplicaciones Multiplataforma"
                        },
                        new
                        {
                            ID = 3,
                            Acronym = "ASIR",
                            Name = "Administración de Sistemas Informáticos en Red"
                        });
                });

            modelBuilder.Entity("QuieroUn10.Models.StudyHasSubject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("StudyId")
                        .HasColumnType("int");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StudyId");

                    b.HasIndex("SubjectId");

                    b.ToTable("STUDY_HAS_SUBJECT");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            StudyId = 1,
                            SubjectId = 1
                        },
                        new
                        {
                            ID = 2,
                            StudyId = 1,
                            SubjectId = 2
                        },
                        new
                        {
                            ID = 3,
                            StudyId = 1,
                            SubjectId = 3
                        },
                        new
                        {
                            ID = 4,
                            StudyId = 1,
                            SubjectId = 4
                        },
                        new
                        {
                            ID = 5,
                            StudyId = 1,
                            SubjectId = 5
                        },
                        new
                        {
                            ID = 6,
                            StudyId = 1,
                            SubjectId = 6
                        },
                        new
                        {
                            ID = 7,
                            StudyId = 1,
                            SubjectId = 7
                        },
                        new
                        {
                            ID = 8,
                            StudyId = 1,
                            SubjectId = 8
                        },
                        new
                        {
                            ID = 9,
                            StudyId = 1,
                            SubjectId = 9
                        },
                        new
                        {
                            ID = 10,
                            StudyId = 1,
                            SubjectId = 10
                        },
                        new
                        {
                            ID = 11,
                            StudyId = 1,
                            SubjectId = 11
                        },
                        new
                        {
                            ID = 12,
                            StudyId = 1,
                            SubjectId = 12
                        },
                        new
                        {
                            ID = 13,
                            StudyId = 2,
                            SubjectId = 1
                        },
                        new
                        {
                            ID = 14,
                            StudyId = 2,
                            SubjectId = 2
                        },
                        new
                        {
                            ID = 15,
                            StudyId = 2,
                            SubjectId = 3
                        },
                        new
                        {
                            ID = 16,
                            StudyId = 2,
                            SubjectId = 4
                        },
                        new
                        {
                            ID = 17,
                            StudyId = 2,
                            SubjectId = 5
                        },
                        new
                        {
                            ID = 18,
                            StudyId = 2,
                            SubjectId = 6
                        },
                        new
                        {
                            ID = 19,
                            StudyId = 2,
                            SubjectId = 13
                        },
                        new
                        {
                            ID = 20,
                            StudyId = 2,
                            SubjectId = 14
                        },
                        new
                        {
                            ID = 21,
                            StudyId = 2,
                            SubjectId = 15
                        },
                        new
                        {
                            ID = 22,
                            StudyId = 2,
                            SubjectId = 16
                        },
                        new
                        {
                            ID = 23,
                            StudyId = 2,
                            SubjectId = 11
                        },
                        new
                        {
                            ID = 24,
                            StudyId = 2,
                            SubjectId = 17
                        },
                        new
                        {
                            ID = 25,
                            StudyId = 2,
                            SubjectId = 18
                        });
                });

            modelBuilder.Entity("QuieroUn10.Models.Subject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Acronym")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<string>("Course")
                        .IsRequired()
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.Property<bool>("Formal_Subject")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<bool>("Student_Create")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("ID");

                    b.ToTable("SUBJECT");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Acronym = "SSII",
                            Course = "1",
                            Formal_Subject = true,
                            Name = "Sistemas informáticos.",
                            Student_Create = false
                        },
                        new
                        {
                            ID = 2,
                            Acronym = "BBDD",
                            Course = "1",
                            Formal_Subject = true,
                            Name = "Bases de datos",
                            Student_Create = false
                        },
                        new
                        {
                            ID = 3,
                            Acronym = "Programación",
                            Course = "1",
                            Formal_Subject = true,
                            Name = "Programación",
                            Student_Create = false
                        },
                        new
                        {
                            ID = 4,
                            Acronym = "LM",
                            Course = "1",
                            Formal_Subject = true,
                            Name = "Lenguajes de marcas y sistemas de gestión de información",
                            Student_Create = false
                        },
                        new
                        {
                            ID = 5,
                            Acronym = "ED",
                            Course = "1",
                            Formal_Subject = true,
                            Name = "Entornos de desarrollo",
                            Student_Create = false
                        },
                        new
                        {
                            ID = 6,
                            Acronym = "FOL.",
                            Course = "1",
                            Formal_Subject = true,
                            Name = "Formación y orientación laboral",
                            Student_Create = false
                        },
                        new
                        {
                            ID = 7,
                            Acronym = "DWEC",
                            Course = "2",
                            Formal_Subject = true,
                            Name = "Desarrollo web en entorno cliente",
                            Student_Create = false
                        },
                        new
                        {
                            ID = 8,
                            Acronym = "DWS",
                            Course = "2",
                            Formal_Subject = true,
                            Name = "Desarrollo web en entorno servidor",
                            Student_Create = false
                        },
                        new
                        {
                            ID = 9,
                            Acronym = "DAW",
                            Course = "2",
                            Formal_Subject = true,
                            Name = "Despliegue de aplicaciones web",
                            Student_Create = false
                        },
                        new
                        {
                            ID = 10,
                            Acronym = "DIW",
                            Course = "2",
                            Formal_Subject = true,
                            Name = "Diseño de interfaces Web",
                            Student_Create = false
                        },
                        new
                        {
                            ID = 11,
                            Acronym = "Empresa",
                            Course = "2",
                            Formal_Subject = true,
                            Name = "Empresa e iniciativa emprendedora",
                            Student_Create = false
                        },
                        new
                        {
                            ID = 12,
                            Acronym = "TFG - DAW",
                            Course = "2",
                            Formal_Subject = true,
                            Name = "Proyecto de desarrollo de aplicaciones web",
                            Student_Create = false
                        },
                        new
                        {
                            ID = 13,
                            Acronym = "AD",
                            Course = "2",
                            Formal_Subject = true,
                            Name = "Acceso a datos",
                            Student_Create = false
                        },
                        new
                        {
                            ID = 14,
                            Acronym = "DI",
                            Course = "2",
                            Formal_Subject = true,
                            Name = "Desarrollo de interfaces",
                            Student_Create = false
                        },
                        new
                        {
                            ID = 15,
                            Acronym = "PMDM",
                            Course = "2",
                            Formal_Subject = true,
                            Name = "Programación multimedia y dispositivos móviles.",
                            Student_Create = false
                        },
                        new
                        {
                            ID = 16,
                            Acronym = "PSP",
                            Course = "2",
                            Formal_Subject = true,
                            Name = "Programación de servicios y procesos",
                            Student_Create = false
                        },
                        new
                        {
                            ID = 17,
                            Acronym = "SGE",
                            Course = "2",
                            Formal_Subject = true,
                            Name = "Sistemas de gestión empresarial",
                            Student_Create = false
                        },
                        new
                        {
                            ID = 18,
                            Acronym = "TFG - DAM",
                            Course = "2",
                            Formal_Subject = true,
                            Name = "Proyecto de desarrollo de aplicaciones multiplataforma",
                            Student_Create = false
                        });
                });

            modelBuilder.Entity("QuieroUn10.Models.Task", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AllDay")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ClassName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("StudentHasSubjectId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("StudentHasSubjectId");

                    b.ToTable("TASK");
                });

            modelBuilder.Entity("QuieroUn10.Models.UserAccount", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("varchar(10) CHARACTER SET utf8mb4")
                        .HasMaxLength(10);

                    b.HasKey("ID");

                    b.HasIndex("RoleId");

                    b.ToTable("USER_ACCOUNT");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Active = true,
                            Email = "admin1@gmail.com",
                            Password = "YQBkAG0AaQBuADEA",
                            RoleId = 1,
                            Username = "admin1"
                        },
                        new
                        {
                            ID = 2,
                            Active = false,
                            Email = "admin2@gmail.com",
                            Password = "YQBkAG0AaQBuADIA",
                            RoleId = 1,
                            Username = "admin2"
                        },
                        new
                        {
                            ID = 3,
                            Active = true,
                            Email = "student1@gmail.com",
                            Password = "cwB0AHUAZABlAG4AdAAxAA==",
                            RoleId = 2,
                            Username = "student1"
                        },
                        new
                        {
                            ID = 4,
                            Active = false,
                            Email = "student2@gmail.com",
                            Password = "cwB0AHUAZABlAG4AdAAyAA==",
                            RoleId = 2,
                            Username = "student2"
                        });
                });

            modelBuilder.Entity("QuieroUn10.Models.UserToken", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("GeneratedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Life")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("UserAccountId")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserAccountId");

                    b.ToTable("USER_TOKEN");
                });

            modelBuilder.Entity("QuieroUn10.Models.Admin", b =>
                {
                    b.HasOne("QuieroUn10.Models.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("QuieroUn10.Models.CalendarTask", b =>
                {
                    b.HasOne("QuieroUn10.Models.Student", "Student")
                        .WithMany("CalendarTasks")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuieroUn10.Models.Doc", b =>
                {
                    b.HasOne("QuieroUn10.Models.StudentHasSubject", "StudentHasSubject")
                        .WithMany("Docs")
                        .HasForeignKey("StudentHasSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuieroUn10.Models.RoleHasMenu", b =>
                {
                    b.HasOne("QuieroUn10.Models.Menu", "Menu")
                        .WithMany("RoleHasMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuieroUn10.Models.Role", "Role")
                        .WithMany("RoleHasMenus")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuieroUn10.Models.Student", b =>
                {
                    b.HasOne("QuieroUn10.Models.UserAccount", "UserAccount")
                        .WithMany()
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("QuieroUn10.Models.StudentHasSubject", b =>
                {
                    b.HasOne("QuieroUn10.Models.Student", "Student")
                        .WithMany("StudentHasSubjects")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuieroUn10.Models.Subject", "Subject")
                        .WithMany("StudentHasSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuieroUn10.Models.StudyHasSubject", b =>
                {
                    b.HasOne("QuieroUn10.Models.Study", "Study")
                        .WithMany("StudyHasSubjects")
                        .HasForeignKey("StudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuieroUn10.Models.Subject", "Subject")
                        .WithMany("StudyHasSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuieroUn10.Models.Task", b =>
                {
                    b.HasOne("QuieroUn10.Models.StudentHasSubject", "StudentHasSubject")
                        .WithMany("Tasks")
                        .HasForeignKey("StudentHasSubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuieroUn10.Models.UserAccount", b =>
                {
                    b.HasOne("QuieroUn10.Models.Role", "Role")
                        .WithMany("UserAccounts")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuieroUn10.Models.UserToken", b =>
                {
                    b.HasOne("QuieroUn10.Models.UserAccount", "UserAccount")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
